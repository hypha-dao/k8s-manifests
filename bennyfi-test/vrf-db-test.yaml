apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bennyfi-vrf-db-test-pvc
  namespace: bennyfi-test
  labels:
    app: vrf-db
    env: test
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bennyfi-vrf-db-test
  namespace: bennyfi-test
  labels:
    app: vrf-db
    env: test
spec:
  serviceName: bennyfi-vrf-db-test
  selector:
    matchLabels:
      app: vrf-db
      env: test
  replicas: 1
  template:
    metadata:
      labels:
        app: vrf-db
        env: test
    spec:
      containers:
      - name: bennyfi-vrf-db-test
        image: sebastianmontero/vrf-db-test:8334f0d4cb51178e0634b3aeb08ad73ee2e29657
        # resources:
        #   limits:
        #     memory: "128Mi"
        #     cpu: "500m"
        envFrom:
          - secretRef:
             name: bennyfi-vrf-test-secrets
        ports:
         - containerPort: 5432
           name: default
        volumeMounts:
        - name: bennyfi-vrf-db-test-pvc
          mountPath: /var/lib/postgresql
      volumes:
        - name: bennyfi-vrf-db-test-pvc
          persistentVolumeClaim:
            claimName: bennyfi-vrf-db-test-pvc
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: dho-prometheus
# spec:
#   selector:
#     app: dho-prometheus
#   type: ClusterIP
#   ports:
#   - port: 9090
#     targetPort: 9090
#     protocol: TCP
---
apiVersion: v1
kind: Service
metadata:
  name: bennyfi-vrf-db-test
  namespace: bennyfi-test
  labels:
    app: vrf-db
    env: test
spec:
  selector:
    app: vrf-db
    env: test
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
# ---
# apiVersion: networking.k8s.io/v1beta1
# kind: Ingress
# metadata:
#   name: dho-prometheus-ingress
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     cert-manager.io/cluster-issuer: letsencrypt-prod
# spec:
#   tls:
#   - hosts:
#     - dho-prometheus.tekit.io
#     secretName: dho-prometheus-tekit-tls
#   rules:
#   - host: dho-prometheus.tekit.io
#     http:
#       paths:
#       - backend:
#           serviceName: dho-prometheus
#           servicePort: 80
