apiVersion: v1
kind: Service
metadata:
  name: dgraph-mainnet
  namespace: document-cache
  labels:
    app: dgraph
    env: telos-mainnet
spec:
  type: ClusterIP
  ports:
  - port: 5080
    targetPort: 5080
    name: grpc-zero
  - port: 6080
    targetPort: 6080
    name: http-zero
  - port: 8080
    targetPort: 8080
    name: http-alpha
  - port: 9080
    targetPort: 9080
    name: grpc-alpha
  - port: 8000
    targetPort: 8000
    name: http-ratel
  selector:
    app: dgraph
    env: telos-mainnet
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: dgraph-mainnet-pvc
#   namespace: document-cache
#   labels:
#     app: dgraph
#     env: telos-mainnet
# spec:
#   accessModes:
#   - ReadWriteOnce
#   resources:
#     requests:
#       storage: 20Gi
#   storageClassName: standard
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: dgraph-mainnet
  namespace: document-cache
  labels:
    app: dgraph
    env: telos-mainnet
spec:
  serviceName: dgraph-mainnet
  replicas: 1
  selector:
      matchLabels:
        app: dgraph
        env: telos-mainnet
  template:
    metadata:
      labels:
        app: dgraph
        env: telos-mainnet
    spec:
      containers:
      - name: ratel
        image: dgraph/dgraph:v20.11.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http-ratel
        command:
          - dgraph-ratel
      - name: zero
        image: dgraph/dgraph:v20.11.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5080
          name: grpc-zero
        - containerPort: 6080
          name: http-zero
        volumeMounts:
        - name: dgraph-mainnet-pvc
          mountPath: /dgraph
        command:
          - bash
          - "-c"
          - |
            set -ex
            dgraph zero --my=$(hostname -f):5080
      - name: alpha
        image: dgraph/dgraph:v20.11.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http-alpha
        - containerPort: 9080
          name: grpc-alpha
        volumeMounts:
        - name: dgraph-mainnet-pvc
          mountPath: /dgraph
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        command:
          - bash
          - "-c"
          - |
            set -ex
            dgraph alpha --whitelist 10.0.0.0/8 --my=$(hostname -f):7080 --zero dgraph-mainnet:5080
      terminationGracePeriodSeconds: 60
      volumes:
      - name: dgraph-mainnet-pvc
        persistentVolumeClaim:
          claimName: dgraph-mainnet-pvc
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: dgraph-mainnet-pvc
      annotations:
        volume.alpha.kubernetes.io/storage-class: anything
    spec:
      accessModes:
        - "ReadWriteOnce"
      resources:
        requests:
          storage: 20Gi
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: dgraph-ingress-alpha-mainnet
  namespace: document-cache
  annotations:
    kubernetes.io/ingress.class: "nginx"    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - alpha.tekit.io
    secretName: dgraph-alpha-mainnet-tekit-com-tls
  rules:
  - host: alpha.tekit.io
    http:
      paths:
      - backend:
          serviceName: dgraph-mainnet
          servicePort: 8080
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: dgraph-ingress-ratel-mainnet
  namespace: document-cache
  annotations:
    kubernetes.io/ingress.class: "nginx"    
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - ratel.tekit.io
    secretName: dgraph-ratel-mainnet-tekit-com-tls
  rules:
  - host: ratel.tekit.io
    http:
      paths:
      - backend:
          serviceName: dgraph-mainnet
          servicePort: 8000